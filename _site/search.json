[
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "model",
    "section": "",
    "text": "# install necessary libraries\nlibrary(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(writexl)\nlibrary(stringr)\nlibrary(rstanarm)\n\nLoading required package: Rcpp\nThis is rstanarm version 2.21.4\n- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!\n- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.\n- For execution on a local, multicore CPU with excess RAM we recommend calling\n  options(mc.cores = parallel::detectCores())\n\nlibrary(ggthemes)\n\n\n# read the excel file as a csv\ntop5 &lt;- read_excel(\"Top5Leagues_Payroll.xlsx\")\n\n\n# select the necessary columns and create a data frame where there is the total money spent of each league across seasons\nx &lt;- top5 |&gt;\n  select(\"Season\", \"Rk\", \"Squad\", \"Annual Wages\", \"Standing\") |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`)\n\n\n# create a new data frame, where there is a column for a teams % salary out of the entire league\nx_1 &lt;- x |&gt;\n  summarise(.by = Season, Rk = Rk, Squad = Squad, Standing = Standing, annual = annual, percent = annual/sum(annual))\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\n# create models, where standing depends on Rk, and in the other Rk and percent\nfit_1 &lt;- stan_glm(Standing ~ Rk,\n                  data = x,\n                  family = gaussian,\n                  refresh = 0,\n                  seed = 9)\n\nfit_2 &lt;- stan_glm(Standing ~ Rk + percent,\n                  data = x_1,\n                  family = gaussian,\n                  refresh = 0)\n\n\n# glance details of the model \nfit_1\n\nstan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk\n observations: 1052\n predictors:   2\n------\n            Median MAD_SD\n(Intercept) 3.2    0.3   \nRk          0.7    0.0   \n\nAuxiliary parameter(s):\n      Median MAD_SD\nsigma 4.1    0.1   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\nfit_2\n\nstan_glm\n family:       gaussian [identity]\n formula:      Standing ~ Rk + percent\n observations: 1052\n predictors:   3\n------\n            Median MAD_SD\n(Intercept)   3.9    0.4 \nRk            0.7    0.0 \npercent     -23.3    8.0 \n\nAuxiliary parameter(s):\n      Median MAD_SD\nsigma 4.1    0.1   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\n\n\n# compare the models (fit_2 is better)\nloo_compare(loo(fit_1), loo(fit_2))\n\nWarning: Not all models have the same y variable. ('yhash' attributes do not\nmatch)\n\n\n      elpd_diff se_diff\nfit_2  0.0       0.0   \nfit_1 -3.5      29.3   \n\n\n\n# create object to model (teams of rank 1 - 20)\nnewobs &lt;- tibble(Rk = 1:20)\n\n# create posterior distribution of end-of-year standings depeding on Rk\npe &lt;- posterior_epred(fit_1, newdata = newobs) |&gt; \n  as_tibble() |&gt;\n  pivot_longer(cols = `1`:`20`,\n               names_to = \"rank\",\n               values_to = \"standing\") |&gt;\n  mutate_all(as.numeric)\n\n\n# plot the posterior distribution\npe |&gt;\n  ggplot(aes(x = rank, y = standing)) +\n  geom_point(alpha = 0.5) + \n  scale_y_reverse(breaks = seq(20, 1, by = -1)) +\n  scale_x_reverse(breaks = seq(20, 1, by = -1)) +\n  labs(title = \"Posterior Distribution of Team Standing \\nDepending on Payroll Rank\",\n       subtitle = \"There is a positive correlation between league position and payroll\",\n       y = \"Standing\",\n       x = \"Payroll Rank\") +\n  theme_fivethirtyeight() +\n  theme(axis.title.x = element_text()) +\n  theme(axis.title.y = element_text())"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Context\n\n# read the excel file as a csv\ntop5 &lt;- read_excel(\"Top5Leagues_Payroll.xlsx\")\n\n\n# plot the graph\na |&gt;\n  ggplot(aes(x = Season, y = total, color = League)) +\n  geom_point() +\n  geom_line() +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  scale_x_continuous(breaks = seq(2013, 2022, by = 1)) +\n  labs(title = \"Total Annual Wages for Each League\",\n       subtitle = \"Each league has steadily increased spending\",\n       color = NULL) +\n  theme_fivethirtyeight()"
  },
  {
    "objectID": "sources.html",
    "href": "sources.html",
    "title": "sources",
    "section": "",
    "text": "hbref\nprocess"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, my name is Daniel Cho…"
  },
  {
    "objectID": "about.html#about-me",
    "href": "about.html#about-me",
    "title": "About",
    "section": "",
    "text": "Hi, my name is Daniel Cho…"
  },
  {
    "objectID": "about.html#about-this-project",
    "href": "about.html#about-this-project",
    "title": "About",
    "section": "About This Project",
    "text": "About This Project\nWith the help of David Kane’s Free Data Science Bootcamp, I learned the basics of data science in six weeks to create this project."
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "analysis",
    "section": "",
    "text": "# install necessary libraries\nlibrary(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(writexl)\nlibrary(stringr)\nlibrary(ggthemes)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(formattable)\n\n\nAttaching package: 'formattable'\n\nThe following object is masked from 'package:plotly':\n\n    style\n\nlibrary(DT)\nlibrary(ggplot2)\n\n\n# read the excel file as a csv\ntop5 &lt;- read_excel(\"Top5Leagues_Payroll.xlsx\")\n\n\n# create and save a tibble, where the first season is 2013 and selects teams of the top four and bottom three (top four usually Champions League qualification, bottom three relegationn)\nb &lt;- top5 |&gt;\n  select(-c(\"# Pl\", \"Weekly Wages\", \"% Estimated\", \"Squad (again)\")) |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`) |&gt;\n  filter(Season &gt;= 2013, Standing &lt;= 4 | Standing &gt;= 18) |&gt;\n  mutate(top = Standing &lt;= 4) |&gt;\n  mutate(top = ifelse(top == TRUE, \"Top 4\", \"Bottom 3\")) \n\n\n# create ggplot object, mapping top team and bottom teams in standing and their payrolls\nc &lt;- b |&gt;\n  ggplot(aes(x = Season, y = annual, color = top, text = paste(\"Season:\", Season, \"\\n\", \n                                                               \"Payroll:\", currency(annual), \"\\n\",\n                                                               \"Standing:\", Standing, \"\\n\",\n                                                               \"Team:\", Squad))) +\n  geom_point(alpha = 0.5) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  scale_x_continuous(breaks = seq(2013, 2022, by = 1)) +\n  labs(title = \"Payroll of Top Four vs Bottom Three Teams in Each Season\",\n       subtitle = \"The payroll gap of top from bottom has steadily increased\",\n       y = \"Payroll\",\n       color = \"\") +\n  theme_fivethirtyeight()\n\n\n# convert to interactive plot\nc |&gt;\n  ggplotly(tooltip = \"text\") |&gt;\n  layout(title = list(font = list(family = \"Arial\")),\n         legend = list(font = list(family = \"Arial\")),\n         xlabel = list(font = list(family = \"Arial\")))\n\nWarning: plotly.js does not (yet) support horizontal legend items \nYou can track progress here: \nhttps://github.com/plotly/plotly.js/issues/53 \n\n\nWarning: 'layout' objects don't have these attributes: 'xlabel'\nValid attributes include:\n'_deprecated', 'activeshape', 'annotations', 'autosize', 'autotypenumbers', 'calendar', 'clickmode', 'coloraxis', 'colorscale', 'colorway', 'computed', 'datarevision', 'dragmode', 'editrevision', 'editType', 'font', 'geo', 'grid', 'height', 'hidesources', 'hoverdistance', 'hoverlabel', 'hovermode', 'images', 'legend', 'mapbox', 'margin', 'meta', 'metasrc', 'modebar', 'newshape', 'paper_bgcolor', 'plot_bgcolor', 'polar', 'scene', 'selectdirection', 'selectionrevision', 'separators', 'shapes', 'showlegend', 'sliders', 'smith', 'spikedistance', 'template', 'ternary', 'title', 'transition', 'uirevision', 'uniformtext', 'updatemenus', 'width', 'xaxis', 'yaxis', 'barmode', 'bargap', 'mapType'\n\n\n\n\n\n\n\n# create data frame where I can extract payroll rank vs standing \nd &lt;- top5 |&gt;\n  select(\"Season\", \"Rk\", \"Squad\", \"Annual Wages\", \"Standing\") |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`) |&gt;\n  summarise(.by = Season, Rk = Rk, Squad = Squad, Standing = Standing, annual = annual, percent = annual/sum(annual))\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\nd_1 &lt;- d |&gt;\n  ggplot(aes(x = Rk, y = Standing)) +\n  geom_jitter(alpha = 0.5) +\n  scale_x_reverse(breaks = seq(20, 1, by = -1)) +\n  scale_y_reverse(breaks = seq(20, 1, by = -1)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"Payroll Rank vs. Season Standing in the Top Five European Leaguse\",\n       subtitle = \"There is a positive correlation between the two\",\n       x = \"Payroll Rank\",\n       y = \"Season Standing\") \n\n\nd_1 |&gt;\n  ggplotly()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n# create data frame to measure a team's performance relative to payroll rank, diff is difference between payroll rank and standing (+ is good)\ndifferential &lt;- top5 |&gt;\n  select(-c(\"# Pl\", \"Weekly Wages\", \"% Estimated\", \"Squad (again)\")) |&gt;\n  mutate(annual = str_extract(`Annual Wages`, \"\\\\$[0-9,]+\")) |&gt;\n  mutate(annual = as.numeric(gsub(\"[$,]\", \"\", annual))) |&gt;\n  select(-`Annual Wages`) |&gt;\n  mutate(diff = Rk - Standing) |&gt;\n  summarise(.by = Squad, total = sum(diff), years = n()) \n\n\n# add rate column since not all teams appear in the data the same amount of times\ndiff_1 &lt;- differential |&gt;\n  mutate(rate = total / years) |&gt;\n  arrange(desc(rate)) \n\n#create interactive data frame\ndiff_DT &lt;- diff_1 |&gt;\n  datatable()\n\n\ndiff_DT |&gt;\n  formatStyle(columns = names(diff_1), fontFamily = \"Arial\")"
  }
]